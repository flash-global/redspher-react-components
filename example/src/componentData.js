module.exports = [{"name":"RubiwinBackButton","description":"This is a simple ios style backButton","props":{"onClick":{"type":{"name":"func"},"required":true,"description":"this is classic onClick callback"},"text":{"type":{"name":"union","value":[{"name":"element"},{"name":"string"}]},"required":false,"description":"you can either give it a string or a component, such as translate"}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport style from './RubiwinBackButton.module.scss'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\n\n/** This is a simple ios style backButton\n */\nconst RubiwinBackButton = ({ onClick, text }) => (\n  <div className={style.backButton} onClick={onClick}>\n    <ArrowBackIosIcon />\n    {text}\n  </div>\n)\n\nRubiwinBackButton.propTypes = {\n  /** this is classic onClick callback */\n  onClick: PropTypes.func.isRequired,\n  /** you can either give it a string or a component, such as translate */\n  text: PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n}\n\nexport default RubiwinBackButton\n","examples":[{"name":"simpleExample","description":"","code":"import React from 'react'\nimport { RubiwinBackButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst simpleExample = () => (\n  <RubiwinBackButton\n    onClick={() => {\n      window.alert('yay')\n    }}\n    text='ios'\n  />\n)\n\nexport default simpleExample\n"}]},{"name":"RubiwinButton","description":"This is a RubiwinButton branded for Rubiwin\nfull doc : https://material-ui.com/api/button/","props":{"text":{"type":{"name":"string"},"required":true,"description":"text to display, it can be <Translate> component too"},"onClick":{"type":{"name":"func"},"required":false,"description":"function to handleButton behavior *"},"className":{"type":{"name":"string"},"required":false,"description":"additional classname if you want to overload styles","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"disabled RubiwinButton","defaultValue":{"value":"false","computed":false}},"fullWidth":{"type":{"name":"bool"},"required":false,"description":"make the RubiwinButton take the fullWidth of the parent","defaultValue":{"value":"false","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"link to another page"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"can be small, medium, large","defaultValue":{"value":"'medium'","computed":false}},"startIcon":{"type":{"name":"element"},"required":false,"description":"icon before text"},"endIcon":{"type":{"name":"element"},"required":false,"description":"icon after text"}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport NextButton from '@material-ui/core/Button'\nimport { StylesProvider } from '@material-ui/core/styles'\nimport style from './RubiwinButton.module.scss'\n\n/** This is a RubiwinButton branded for Rubiwin\n * full doc : https://material-ui.com/api/button/ */\nconst RubiwinButton = ({\n  text,\n  onClick,\n  className = '',\n  disabled = false,\n  fullWidth = false,\n  href,\n  size = 'medium',\n  endIcon,\n  startIcon\n}) => (\n  <StylesProvider injectFirst>\n    <NextButton\n      onClick={onClick}\n      className={`${style.button} ${className}`}\n      disabled={disabled}\n      fullWidth={fullWidth}\n      href={href}\n      size={size}\n      endIcon={endIcon}\n      startIcon={startIcon}\n    >\n      {text}\n    </NextButton>\n  </StylesProvider>\n)\n\nRubiwinButton.propTypes = {\n  /** text to display, it can be <Translate> component too */\n  text: PropTypes.string.isRequired,\n  /** function to handleButton behavior **/\n  onClick: PropTypes.func,\n  /** additional classname if you want to overload styles */\n  className: PropTypes.string,\n  /** disabled RubiwinButton */\n  disabled: PropTypes.bool,\n  /** make the RubiwinButton take the fullWidth of the parent */\n  fullWidth: PropTypes.bool,\n  /** link to another page */\n  href: PropTypes.string,\n  /** can be small, medium, large */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** icon before text */\n  startIcon: PropTypes.element,\n  /** icon after text */\n  endIcon: PropTypes.element\n}\n\nexport default RubiwinButton\n","examples":[{"name":"ExampleButton","description":"This is an example RubiwinButton Branding with an additonal class","code":"import React from 'react'\nimport { RubiwinButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** This is an example RubiwinButton Branding with an additonal class */\nconst ExampleButton = () => (\n  <RubiwinButton onClick={sayHello} text={'Click me'} className={'rubiwin'} />\n)\n\nexport default ExampleButton\n"},{"name":"ExampleButtonDisabled","description":"Rubiwin Button disabled","code":"import React from 'react'\nimport { RubiwinButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** Rubiwin Button disabled */\nconst ExampleButton = () => (\n  <RubiwinButton onClick={sayHello} text={\"you can't click me\"} disabled />\n)\n\nexport default ExampleButton\n"},{"name":"ExampleButtonFullWidth","description":"Rubiwin Button full width","code":"import React from 'react'\nimport { RubiwinButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** Rubiwin Button full width */\nconst ExampleButton = () => (\n  <RubiwinButton onClick={sayHello} text={'click me'} fullWidth />\n)\n\nexport default ExampleButton\n"},{"name":"ExampleButtonWithIcon","description":"Rubiwin Button with icon","code":"import React from 'react'\nimport { RubiwinButton, MailIcon } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** Rubiwin Button with icon */\nconst ExampleButton = () => (\n  <RubiwinButton\n    onClick={sayHello}\n    text={'click me'}\n    size={'large'}\n    startIcon={\n      <MailIcon\n        style={{\n          color: 'white'\n        }}\n      />\n    }\n  />\n)\n\nexport default ExampleButton\n"}]},{"name":"RubiwinCheckbox","description":"this is a Mui Checkbox branded for Rubiwin\nfull dod : https://material-ui.com/api/checkbox/","props":{"checked":{"type":{"name":"bool"},"required":false,"description":"component is checked or not","defaultValue":{"value":"false","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"add a class to overload styles","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"disable checkbox","defaultValue":{"value":"false","computed":false}},"id":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"set id of components"},"onChange":{"type":{"name":"func"},"required":false,"description":"on Change"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false}]},"required":false,"description":"size","defaultValue":{"value":"'medium'","computed":false}},"inputRef":{"type":{"name":"string"},"required":false,"description":"pass a ref to the input element"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"value of input"},"name":{"type":{"name":"string"},"required":false,"description":"name attribute of input"}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport { StylesProvider } from '@material-ui/core/styles'\nimport style from './RubiwinCheckbox.module.scss'\n\n/** this is a Mui Checkbox branded for Rubiwin\n * full dod : https://material-ui.com/api/checkbox/\n */\nconst RubiwinCheckbox = ({\n  checked = false,\n  className = '',\n  disabled = false,\n  id,\n  onChange,\n  size = 'medium',\n  inputRef,\n  value,\n  name\n}) => (\n  <StylesProvider injectFirst>\n    <Checkbox\n      checked={checked}\n      className={`${style.checkbox} ${className}`}\n      disabled={disabled}\n      id={id}\n      onChange={onChange}\n      size={size}\n      inputRef={inputRef}\n      value={value}\n      name={name}\n      color='primary'\n      classes={{\n        root: style.root,\n        checked: style.checked,\n        disabled: style.disabled\n      }}\n    />\n  </StylesProvider>\n)\n\nRubiwinCheckbox.propTypes = {\n  /** component is checked or not */\n  checked: PropTypes.bool,\n  /** add a class to overload styles */\n  className: PropTypes.string,\n  /** disable checkbox */\n  disabled: PropTypes.bool,\n  /** set id of components */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** on Change */\n  onChange: PropTypes.func,\n  /** size */\n  size: PropTypes.oneOf(['small', 'medium']),\n  /** pass a ref to the input element */\n  inputRef: PropTypes.string,\n  /** value of input */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** name attribute of input */\n  name: PropTypes.string\n}\n\nexport default RubiwinCheckbox\n","examples":[{"name":"ExampleCheckbox","description":"This is a Rubiwin checkbox","code":"import React, { useState } from 'react'\nimport { RubiwinCheckbox } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\n/** This is a Rubiwin checkbox */\nconst ExampleCheckbox = () => {\n  const [checked, setChecked] = useState(true)\n\n  const handleChange = () => {\n    setChecked(!checked)\n  }\n  return (\n    <RubiwinCheckbox\n      onChange={handleChange}\n      checked={checked}\n      inputProps={{ 'aria-label': 'primary checkbox' }}\n      name={'rubiwinCheck'}\n    />\n  )\n}\n\nexport default ExampleCheckbox\n"},{"name":"ExampleCheckboxDisabled","description":"This is a disabled Rubiwin checkbox","code":"import React, { useState } from 'react'\nimport { RubiwinCheckbox } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\n/** This is a disabled Rubiwin checkbox */\nconst ExampleCheckbox = () => {\n  const [checked, setChecked] = useState(true)\n\n  const handleChange = () => {\n    setChecked(!checked)\n  }\n  return (\n    <RubiwinCheckbox\n      onChange={handleChange}\n      checked={checked}\n      inputProps={{ 'aria-label': 'primary checkbox' }}\n      name={'rubiwinCheck'}\n      disabled\n    />\n  )\n}\n\nexport default ExampleCheckbox\n"},{"name":"ExampleCheckboxWithLabel","description":"This is a Rubiwin checkbox in a form label","code":"import React, { useState } from 'react'\nimport { RubiwinCheckbox, RubiwinFormLabel } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\n/** This is a Rubiwin checkbox in a form label */\nconst ExampleCheckboxWithLabel = () => {\n  const [checked, setChecked] = useState(false)\n\n  const handleChange = () => {\n    setChecked(!checked)\n  }\n  return (\n    <RubiwinFormLabel\n      control={<RubiwinCheckbox />}\n      onChange={handleChange}\n      checked={checked}\n      name={'rubiwin'}\n      label={'Rubiwin'}\n    />\n  )\n}\n\nexport default ExampleCheckboxWithLabel\n"}]},{"name":"RubiwinDateTimePicker","description":"full documentation : https://material-ui-pickers.dev/api/DateTimePicker","props":{"onChange":{"type":{"name":"func"},"required":true,"description":"onChange callback"},"value":{"type":{"name":"union","value":[{"name":"instanceOf","value":"Date"},{"name":"string"}]},"required":false,"description":"parsable date"},"allowKeyboardControl":{"type":{"name":"bool"},"required":false,"description":"Enables keyboard listener for moving between days in calendar","defaultValue":{"value":"true","computed":false}},"ampm":{"type":{"name":"bool"},"required":false,"description":"12h/24h view for hour selection clock","defaultValue":{"value":"false","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"add a className","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable picker and text field","defaultValue":{"value":"false","computed":false}},"disableFuture":{"type":{"name":"bool"},"required":false,"description":"Disable future dates","defaultValue":{"value":"false","computed":false}},"disablePast":{"type":{"name":"bool"},"required":false,"description":"Disable past dates","defaultValue":{"value":"false","computed":false}},"emptyLabel":{"type":{"name":"string"},"required":false,"description":"Message displaying in text field, if null passed (doesn't work in keyboard mode)","defaultValue":{"value":"''","computed":false}},"format":{"type":{"name":"string"},"required":false,"description":"Format string","defaultValue":{"value":"'dd/MM/yyyy HH:mm'","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"label text","defaultValue":{"value":"''","computed":false}},"maxDate":{"type":{"name":"union","value":[{"name":"instanceOf","value":"Date"},{"name":"string"}]},"required":false,"description":"Max selectable date","defaultValue":{"value":"new Date('2100-01-01')","computed":false}},"minDate":{"type":{"name":"union","value":[{"name":"instanceOf","value":"Date"},{"name":"string"}]},"required":false,"description":"Min selectable date","defaultValue":{"value":"new Date('1900-01-01')","computed":false}},"onClose":{"type":{"name":"func"},"required":false,"description":"On close callback","defaultValue":{"value":"() => {}","computed":false}},"variant":{"type":{"name":"string"},"required":false,"description":"Picker container option","defaultValue":{"value":"'dialog'","computed":false}},"onError":{"type":{"name":"func"},"required":false,"description":"on error callback","defaultValue":{"value":"() => {}","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core'\n\nconst defaultMaterialTheme = createMuiTheme({\n  palette: {\n    primary: { main: '#00c3ff' }\n  }\n})\n\n/** full documentation : https://material-ui-pickers.dev/api/DateTimePicker */\nconst RubiwinDateTimePicker = ({\n  onChange,\n  value,\n  allowKeyboardControl = true,\n  ampm = false,\n  disabled = false,\n  disableFuture = false,\n  disablePast = false,\n  emptyLabel = '',\n  format = 'dd/MM/yyyy HH:mm',\n  label = '',\n  maxDate = new Date('2100-01-01'),\n  minDate = new Date('1900-01-01'),\n  onClose = () => {},\n  onError = () => {},\n  className = '',\n  variant = 'dialog',\n  TextFieldComponent,\n  ...props\n}) => (\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <ThemeProvider theme={defaultMaterialTheme}>\n      <DateTimePicker\n        label={label}\n        value={value}\n        onChange={onChange}\n        allowKeyboardControl={allowKeyboardControl}\n        ampm={ampm}\n        disabled={disabled}\n        disableFuture={disableFuture}\n        disablePast={disablePast}\n        emptyLabel={emptyLabel}\n        format={format}\n        className={className}\n        minDate={minDate}\n        maxDate={maxDate}\n        onClose={onClose}\n        onError={onError}\n        variant={variant}\n        TextFieldComponent={TextFieldComponent}\n        {...props}\n      />\n    </ThemeProvider>\n  </MuiPickersUtilsProvider>\n)\n\nRubiwinDateTimePicker.propTypes = {\n  /** onChange callback */\n  onChange: PropTypes.func.isRequired,\n  /** parsable date */\n  value: PropTypes.oneOfType([\n    PropTypes.instanceOf(Date).isRequired,\n    PropTypes.string\n  ]),\n  /** Enables keyboard listener for moving between days in calendar */\n  allowKeyboardControl: PropTypes.bool,\n  /** 12h/24h view for hour selection clock */\n  ampm: PropTypes.bool,\n  /** add a className */\n  className: PropTypes.string,\n  /** Disable picker and text field */\n  disabled: PropTypes.bool,\n  /** Disable future dates */\n  disableFuture: PropTypes.bool,\n  /** Disable past dates */\n  disablePast: PropTypes.bool,\n  /** Message displaying in text field, if null passed (doesn't work in keyboard mode) */\n  emptyLabel: PropTypes.string,\n  /** Format string */\n  format: PropTypes.string,\n  /** label text */\n  label: PropTypes.string,\n  /** Max selectable date */\n  maxDate: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),\n  /** Min selectable date */\n  minDate: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),\n  /** On close callback */\n  onClose: PropTypes.func,\n  /** Picker container option */\n  variant: PropTypes.string,\n  /** on error callback */\n  onError: PropTypes.func\n}\n\nexport default RubiwinDateTimePicker\n","examples":[]},{"name":"RubiwinFormLabel","description":"full doc: https://material-ui.com/api/form-control-label/","props":{"control":{"type":{"name":"element"},"required":true,"description":"element for which you want to provide a label"},"label":{"type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"the name of the label, it can be a <translate />"},"checked":{"type":{"name":"bool"},"required":false,"description":"if the children must be checked"},"disabled":{"type":{"name":"bool"},"required":false,"description":"if the children me be desabled"},"labelPlacement":{"type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'end'","computed":false},{"value":"'start'","computed":false},{"value":"'top'","computed":false}]},"required":false,"description":"where should be but the label: bottom, end, start, top"},"onChange":{"type":{"name":"func"},"required":false,"description":"callback when stats is changed"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"value of the component"},"inputRef":{"type":{"name":"string"},"required":false,"description":"pass a ref to input element"},"className":{"type":{"name":"string"},"required":false,"description":"pass a className to component","defaultValue":{"value":"''","computed":false}}},"code":"import React from 'react'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport PropTypes from 'prop-types'\nimport style from './RubiwinFormLabel.module.scss'\nimport { StylesProvider } from '@material-ui/core/styles'\n\n/** full doc: https://material-ui.com/api/form-control-label/ */\nconst RubiwinFormLabel = ({\n  control,\n  label,\n  checked,\n  disabled,\n  labelPlacement,\n  onChange,\n  value,\n  inputRef,\n  className = ''\n}) => {\n  return (\n    <StylesProvider injectFirst>\n      <FormControlLabel\n        control={control}\n        label={label}\n        checked={checked}\n        disabled={disabled}\n        labelPlacement={labelPlacement}\n        onChange={onChange}\n        value={value}\n        inputRef={inputRef}\n        className={`${className}`}\n        classes={{ label: style.label }}\n      />\n    </StylesProvider>\n  )\n}\n\nRubiwinFormLabel.propTypes = {\n  /** element for which you want to provide a label */\n  control: PropTypes.element.isRequired,\n  /** the name of the label, it can be a <translate /> */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /** if the children must be checked */\n  checked: PropTypes.bool,\n  /** if the children me be desabled */\n  disabled: PropTypes.bool,\n  /** where should be but the label: bottom, end, start, top */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n  /** callback when stats is changed */\n  onChange: PropTypes.func,\n  /** value of the component */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** pass a ref to input element */\n  inputRef: PropTypes.string,\n  /** pass a className to component */\n  className: PropTypes.string\n}\n\nexport default RubiwinFormLabel\n","examples":[{"name":"ExampleCheckBoxWithLabel","description":"This is a Rubiwin checkbox in a form label","code":"import React, { useState } from 'react'\nimport { RubiwinCheckbox, RubiwinFormLabel } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\n/** This is a Rubiwin checkbox in a form label */\nconst ExampleCheckboxWithLabel = () => {\n  const [checked, setChecked] = useState(true)\n\n  const handleChange = () => {\n    setChecked(!checked)\n  }\n\n  return (\n    <RubiwinFormLabel\n      control={<RubiwinCheckbox />}\n      onChange={handleChange}\n      checked={checked}\n      name={'rubiwin'}\n      label={'Rubiwin'}\n      labelPlacement={'top'}\n    />\n  )\n}\n\nexport default ExampleCheckboxWithLabel\n"}]},{"name":"RubiwinInputField","description":"this is a simple input\nfull doc: https://material-ui.com/api/input/","props":{"className":{"type":{"name":"string"},"required":false,"description":"add a class to field","defaultValue":{"value":"''","computed":false}},"defaultValue":{"type":{"name":"any"},"required":false,"description":"add an id to input"},"disabled":{"type":{"name":"bool"},"required":false,"description":"disable input","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"bool"},"required":false,"description":"error state","defaultValue":{"value":"false","computed":false}},"endAdornment":{"type":{"name":"node"},"required":false,"description":"add end adornment"},"fullWidth":{"type":{"name":"bool"},"required":false,"description":"fullWidth","defaultValue":{"value":"false","computed":false}},"inputProps":{"type":{"name":"object"},"required":false,"description":"Attributes applied to the input element"},"inputRef":{"type":{"name":"string"},"required":false,"description":"pass a ref to input element"},"multiline":{"type":{"name":"bool"},"required":false,"description":"If true, a textarea element will be rendered.","defaultValue":{"value":"false","computed":false}},"name":{"type":{"name":"string"},"required":false,"description":"Name attribute of the input element."},"onChange":{"type":{"name":"func"},"required":false,"description":"onChange callback"},"placeholder":{"type":{"name":"string"},"required":false,"description":"placeholder"},"readOnly":{"type":{"name":"bool"},"required":false,"description":"readOnly"},"required":{"type":{"name":"bool"},"required":false,"description":"required"},"rows":{"type":{"name":"number"},"required":false,"description":"Number of rows to display when multiline option is set to true."},"rowsMax":{"type":{"name":"number"},"required":false,"description":"Maximum number of rows to display when multiline option is set to true."},"startAdornment":{"type":{"name":"node"},"required":false,"description":"add end adornment"},"type":{"type":{"name":"string"},"required":false,"description":"Type of the input element. It should be a valid HTML5 input type."},"value":{"type":{"name":"any"},"required":false,"description":"value"},"onClick":{"type":{"name":"func"},"required":false,"description":"on click callback"}},"code":"import React from 'react'\nimport Input from '@material-ui/core/Input'\nimport PropTypes from 'prop-types'\nimport style from './RubiwinInputField.module.scss'\n\nimport { StylesProvider } from '@material-ui/core/styles'\n\n/** this is a simple input\n * full doc: https://material-ui.com/api/input/\n * */\n\nconst RubiwinInputField = ({\n  className = '',\n  id,\n  defaultValue,\n  disabled = false,\n  endAdornment,\n  error = false,\n  fullWidth = false,\n  inputProps,\n  inputRef,\n  multiline = false,\n  name,\n  onChange,\n  placeholder,\n  readOnly,\n  required,\n  rows,\n  rowsMax,\n  startAdornment,\n  type,\n  value,\n  onClick,\n  ...props\n}) => (\n  <StylesProvider injectFirst>\n    <Input\n      className={`${className}`}\n      classes={{\n        root: style.root,\n        focused: style.focused,\n        disabled: style.disabled,\n        error: style.error\n      }}\n      disableUnderline\n      endAdornment={endAdornment}\n      id={id}\n      defaultValue={defaultValue}\n      disabled={disabled}\n      error={error}\n      fullWidth={fullWidth}\n      inputProps={inputProps}\n      inputRef={inputRef}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rows={rows}\n      rowsMax={rowsMax}\n      startAdornment={startAdornment}\n      type={type}\n      value={value}\n      onClick={onClick}\n      {...props}\n    />\n  </StylesProvider>\n)\n\nRubiwinInputField.propTypes = {\n  /** add a class to field */\n  className: PropTypes.string,\n  /** add an id to input */\n  defaultValue: PropTypes.any,\n  /** disable input */\n  disabled: PropTypes.bool,\n  /** error state */\n  error: PropTypes.bool,\n  /** add end adornment */\n  endAdornment: PropTypes.node,\n  /** fullWidth */\n  fullWidth: PropTypes.bool,\n  /** Attributes applied to the input element */\n  inputProps: PropTypes.object,\n  /** pass a ref to input element */\n  inputRef: PropTypes.string,\n  /** If true, a textarea element will be rendered. */\n  multiline: PropTypes.bool,\n  /** Name attribute of the input element. */\n  name: PropTypes.string,\n  /** onChange callback */\n  onChange: PropTypes.func,\n  /** placeholder */\n  placeholder: PropTypes.string,\n  /** readOnly */\n  readOnly: PropTypes.bool,\n  /** required */\n  required: PropTypes.bool,\n  /** Number of rows to display when multiline option is set to true. */\n  rows: PropTypes.number,\n  /** Maximum number of rows to display when multiline option is set to true. */\n  rowsMax: PropTypes.number,\n  /** add end adornment */\n  startAdornment: PropTypes.node,\n  /** Type of the input element. It should be a valid HTML5 input type. */\n  type: PropTypes.string,\n  /** value */\n  value: PropTypes.any,\n  /** on click callback */\n  onClick: PropTypes.func\n}\n\nexport default RubiwinInputField\n","examples":[{"name":"ExampleRubiwinInputField","description":"Simple input field","code":"import React from 'react'\nimport { RubiwinInputField } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst testProps = {\n  className: 'test',\n  id: 'id',\n  name: 'name',\n  onChange: () => {},\n  placeholder: 'placeholder'\n}\n\n/** Simple input field */\nconst ExampleRubiwinInputField = () => <RubiwinInputField {...testProps} />\n\nexport default ExampleRubiwinInputField\n"},{"name":"ExampleTextArea","description":"Example of text Area","code":"import React from 'react'\nimport { RubiwinInputField } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst testProps = {\n  className: 'test',\n  id: 'id',\n  name: 'name',\n  onChange: () => {},\n  multiline: true,\n  rows: 5\n}\n\n/** Example of text Area */\nconst ExampleTextArea = () => <RubiwinInputField {...testProps} />\n\nexport default ExampleTextArea\n"},{"name":"ExampleTypeNumber","description":"example with type number","code":"import React from 'react'\nimport { RubiwinInputField } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst testProps = {\n  className: 'test',\n  id: 'id',\n  name: 'name',\n  onChange: () => {},\n  type: 'number'\n}\n\n/** example with type number */\nconst ExampleTypeNumber = () => <RubiwinInputField {...testProps} />\n\nexport default ExampleTypeNumber\n"},{"name":"ExampleWithAdornment","description":"Example with icon","code":"import React from 'react'\nimport { RubiwinInputField, MailIcon } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst testProps = {\n  className: 'test',\n  id: 'id',\n  name: 'name',\n  onChange: () => {},\n  endAdornment: <MailIcon />\n}\n\n/** Example with icon */\nconst ExampleTextArea = () => <RubiwinInputField {...testProps} />\n\nexport default ExampleTextArea\n"},{"name":"ExpampleWithLabel","description":"Example with label","code":"import React from 'react'\nimport { RubiwinInputField, RubiwinInputLabel } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\n/** Example with label */\nconst ExampleWithLabel = () => (\n  <>\n    <RubiwinInputLabel htmlFor={'test'}>tests</RubiwinInputLabel>\n    <RubiwinInputField id={'test'} />\n  </>\n)\n\nexport default ExampleWithLabel\n"}]},{"name":"RubiwinInputLabel","description":"","props":{"children":{"type":{"name":"node"},"required":false,"description":"label text"},"className":{"type":{"name":"string"},"required":false,"description":"add a className"},"disabled":{"type":{"name":"bool"},"required":false,"description":"is disabled"},"error":{"type":{"name":"bool"},"required":false,"description":"has error state"},"htmlFor":{"type":{"name":"string"},"required":false,"description":"htmlFor"}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport style from './RubiwinInputLabel.module.scss'\nimport { StylesProvider } from '@material-ui/core/styles'\n\nconst RubiwinInputLabel = ({\n  children,\n  disabled,\n  error,\n  htmlFor,\n  className\n}) => (\n  <StylesProvider injectFirst>\n    <InputLabel\n      disabled={disabled}\n      error={error}\n      htmlFor={htmlFor}\n      classes={{ root: style.root }}\n      className={className}\n    >\n      {children}\n    </InputLabel>\n  </StylesProvider>\n)\n\nRubiwinInputLabel.propTypes = {\n  /** label text */\n  children: PropTypes.node,\n  /** add a className */\n  className: PropTypes.string,\n  /** is disabled */\n  disabled: PropTypes.bool,\n  /** has error state */\n  error: PropTypes.bool,\n  /** htmlFor */\n  htmlFor: PropTypes.string\n}\n\nexport default RubiwinInputLabel\n","examples":[{"name":"ExampleLabel","description":"Example with label","code":"import React from 'react'\nimport { RubiwinInputField, RubiwinInputLabel } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\n/** Example with label */\nconst ExampleLabel = () => (\n  <>\n    <RubiwinInputLabel htmlFor={'test'}>tests</RubiwinInputLabel>\n    <RubiwinInputField id={'test'} />\n  </>\n)\n\nexport default ExampleLabel\n"}]},{"name":"RubiwinMenuItem","description":"","props":{"children":{"type":{"name":"node"},"required":false,"description":"children"},"className":{"type":{"name":"string"},"required":false,"description":"add a class to children"},"component":{"type":{"name":"string"},"required":false,"description":"The component used for the root node. Either a string to use a HTML element or a component."}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport style from './rubiwinMenuItem.module.scss'\n\nconst RubiwinMenuItem = ({ children, className, component, ...props }) => (\n  <MenuItem\n    className={className}\n    component={component}\n    classes={{ root: style.root, selected: style.selected }}\n    {...props}\n  >\n    {children}\n  </MenuItem>\n)\n\nRubiwinMenuItem.propTypes = {\n  /** children */\n  children: PropTypes.node,\n  /** add a class to children */\n  className: PropTypes.string,\n  /** The component used for the root node. Either a string to use a HTML element or a component. */\n  component: PropTypes.string\n}\n\nexport default RubiwinMenuItem\n","examples":[]},{"name":"RubiwinSelect","description":"full docs : https://material-ui.com/components/selects/","props":{"autoWidth":{"type":{"name":"bool"},"required":false,"description":"If true, the width of the popover will automatically be set according to the items inside the menu, otherwise it will be at least the width of the select input."},"children":{"type":{"name":"node"},"required":false,"description":"The option elements to populate the select with. Can be some MenuItem when native is false and option when native is true."},"className":{"type":{"name":"string"},"required":false,"description":"pass a className"},"id":{"type":{"name":"string"},"required":false,"description":"The id of the wrapper element."},"input":{"type":{"name":"element"},"required":false,"description":"An Input element; does not have to be a material-ui specific Input"},"inputProps":{"type":{"name":"object"},"required":false,"description":"Attributes applied to the input element. When native is true, the attributes are applied on the select element."},"multiple":{"type":{"name":"bool"},"required":false,"description":"If true, value must be an array and the menu will support multiple selections."},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback function fired when a menu item is selected."},"onClose":{"type":{"name":"func"},"required":false,"description":"Callback fired when the component requests to be closed. Use in controlled mode (see open)."},"onOpen":{"type":{"name":"func"},"required":false,"description":"Callback fired when the component requests to be opened. Use in controlled mode (see open)."},"open":{"type":{"name":"bool"},"required":false,"description":"Control select open state. You can only use it when the native prop is false (default)."},"renderValue":{"type":{"name":"func"},"required":false,"description":"function(value: any) => ReactNode\n   value: The value provided to the component."},"value":{"type":{"name":"any"},"required":false,"description":"The input value. Providing an empty string will select no options."}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Select from '@material-ui/core/Select'\nimport style from './rubiwinSelect.module.scss'\n\n/** full docs : https://material-ui.com/components/selects/ */\nconst RubiwinSelect = ({\n  children,\n  className,\n  autoWidth,\n  id,\n  input,\n  inputProps,\n  multiple,\n  onChange,\n  onClose,\n  onOpen,\n  open,\n  renderValue,\n  value,\n  ...props\n}) => (\n  <Select\n    autoWidth={autoWidth}\n    id={id}\n    input={input}\n    inputProps={inputProps}\n    multiple={multiple}\n    onChange={onChange}\n    onClose={onClose}\n    onOpen={onOpen}\n    open={open}\n    renderValue={renderValue}\n    value={value}\n    className={className}\n    classes={{ select: style.select }}\n    {...props}\n  >\n    {children}\n  </Select>\n)\n\nRubiwinSelect.propTypes = {\n  /** If true, the width of the popover will automatically be set according to the items inside the menu, otherwise it will be at least the width of the select input. */\n  autoWidth: PropTypes.bool,\n  /** The option elements to populate the select with. Can be some MenuItem when native is false and option when native is true. */\n  children: PropTypes.node,\n  /** pass a className */\n  className: PropTypes.string,\n  /** The id of the wrapper element. */\n  id: PropTypes.string,\n  /** An Input element; does not have to be a material-ui specific Input */\n  input: PropTypes.element,\n  /** Attributes applied to the input element. When native is true, the attributes are applied on the select element. */\n  inputProps: PropTypes.object,\n  /** If true, value must be an array and the menu will support multiple selections. */\n  multiple: PropTypes.bool,\n  /** Callback function fired when a menu item is selected. */\n  onChange: PropTypes.func,\n  /**  Callback fired when the component requests to be closed. Use in controlled mode (see open). */\n  onClose: PropTypes.func,\n  /** Callback fired when the component requests to be opened. Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n  /** Control select open state. You can only use it when the native prop is false (default). */\n  open: PropTypes.bool,\n  /** function(value: any) => ReactNode\n   value: The value provided to the component. */\n  renderValue: PropTypes.func,\n  /** The input value. Providing an empty string will select no options. */\n  value: PropTypes.any\n}\n\nexport default RubiwinSelect\n","examples":[]},{"name":"RubiwinSquareButton","description":"","props":{"text":{"type":{"name":"string"},"required":true,"description":"text to display, it can be <Translate> component too"},"onClick":{"type":{"name":"func"},"required":false,"description":"function to handleButton behavior *"},"className":{"type":{"name":"string"},"required":false,"description":"additional classname if you want to overload styles","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"disabled button","defaultValue":{"value":"false","computed":false}},"fullWidth":{"type":{"name":"bool"},"required":false,"description":"make the button take the fullWidth of the parent","defaultValue":{"value":"false","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"link to another page"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"can be small, medium, large","defaultValue":{"value":"'medium'","computed":false}},"startIcon":{"type":{"name":"element"},"required":false,"description":"icon before text"},"endIcon":{"type":{"name":"element"},"required":false,"description":"icon after text"}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StylesProvider } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport style from './RubiwinSquareButton.module.scss'\n\nconst RubiwinSquareButton = ({\n  text,\n  onClick,\n  className = '',\n  disabled = false,\n  fullWidth = false,\n  href,\n  size = 'medium',\n  endIcon,\n  startIcon\n}) => (\n  <StylesProvider injectFirst>\n    <Button\n      onClick={onClick}\n      className={`${className}`}\n      disabled={disabled}\n      fullWidth={fullWidth}\n      href={href}\n      size={size}\n      endIcon={endIcon}\n      startIcon={startIcon}\n      classes={{ root: style.root, disabled: style.disabled }}\n    >\n      {text}\n    </Button>\n  </StylesProvider>\n)\n\nRubiwinSquareButton.propTypes = {\n  /** text to display, it can be <Translate> component too */\n  text: PropTypes.string.isRequired,\n  /** function to handleButton behavior **/\n  onClick: PropTypes.func,\n  /** additional classname if you want to overload styles */\n  className: PropTypes.string,\n  /** disabled button */\n  disabled: PropTypes.bool,\n  /** make the button take the fullWidth of the parent */\n  fullWidth: PropTypes.bool,\n  /** link to another page */\n  href: PropTypes.string,\n  /** can be small, medium, large */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** icon before text */\n  startIcon: PropTypes.element,\n  /** icon after text */\n  endIcon: PropTypes.element\n}\n\nexport default RubiwinSquareButton\n","examples":[{"name":"ExampleButton","description":"This is an example RubiwinButton Branding with an additional class","code":"import React from 'react'\nimport { RubiwinSquareButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** This is an example RubiwinButton Branding with an additional class */\nconst ExampleButton = () => (\n  <RubiwinSquareButton\n    onClick={sayHello}\n    text={'Click me'}\n    className={'rubiwin'}\n  />\n)\n\nexport default ExampleButton\n"},{"name":"ExampleButtonDisabled","description":"Rubiwin Button disabled","code":"import React from 'react'\nimport { RubiwinSquareButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** Rubiwin Button disabled */\nconst ExampleButton = () => (\n  <RubiwinSquareButton\n    onClick={sayHello}\n    text={\"you can't click me\"}\n    disabled\n  />\n)\n\nexport default ExampleButton\n"},{"name":"ExampleButtonFullWidth","description":"Rubiwin Button full width","code":"import React from 'react'\nimport { RubiwinSquareButton } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** Rubiwin Button full width */\nconst ExampleButton = () => (\n  <RubiwinSquareButton onClick={sayHello} text={'click me'} fullWidth />\n)\n\nexport default ExampleButton\n"},{"name":"ExampleButtonWithIcon","description":"Rubiwin Button with icon","code":"import React from 'react'\nimport { RubiwinSquareButton, MailIcon } from 'redspher-components'\nimport 'redspher-components/dist/index.css'\n\nconst sayHello = () => {\n  alert('Hello Rubiwin')\n}\n\n/** Rubiwin Button with icon */\nconst ExampleButton = () => (\n  <RubiwinSquareButton\n    onClick={sayHello}\n    text={'click me'}\n    size={'large'}\n    startIcon={\n      <MailIcon\n        style={{\n          color: 'white'\n        }}\n      />\n    }\n  />\n)\n\nexport default ExampleButton\n"}]}]